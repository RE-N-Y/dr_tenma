type Patient {
  id: ID!
  name: String
  email: AWSEmail!
  records(filter: ModelSymptomFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelSymptomConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Symptom {
  id: ID!
  patientID: ID!
  fever: Int!
  coughing: Int!
  breathing: Int!
  soreThroat: Int!
  allergies: Int!
  bodyAches: Int!
  temperature: Float!
  location: Location
  note: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Location {
  longitude: Float!
  latitude: Float!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPatientConnection {
  items: [Patient]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPatientFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  email: ModelStringInput
  and: [ModelPatientFilterInput]
  or: [ModelPatientFilterInput]
  not: ModelPatientFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getPatient(id: ID!): Patient
  listPatients(filter: ModelPatientFilterInput, limit: Int, nextToken: String): ModelPatientConnection
  getSymptom(id: ID!): Symptom
  listSymptoms(filter: ModelSymptomFilterInput, limit: Int, nextToken: String): ModelSymptomConnection
}

input CreatePatientInput {
  id: ID
  name: String
  email: AWSEmail!
}

input UpdatePatientInput {
  id: ID!
  name: String
  email: AWSEmail
}

input DeletePatientInput {
  id: ID
}

type Mutation {
  createPatient(input: CreatePatientInput!, condition: ModelPatientConditionInput): Patient
  updatePatient(input: UpdatePatientInput!, condition: ModelPatientConditionInput): Patient
  deletePatient(input: DeletePatientInput!, condition: ModelPatientConditionInput): Patient
  createSymptom(input: CreateSymptomInput!, condition: ModelSymptomConditionInput): Symptom
  updateSymptom(input: UpdateSymptomInput!, condition: ModelSymptomConditionInput): Symptom
  deleteSymptom(input: DeleteSymptomInput!, condition: ModelSymptomConditionInput): Symptom
}

input ModelPatientConditionInput {
  name: ModelStringInput
  email: ModelStringInput
  and: [ModelPatientConditionInput]
  or: [ModelPatientConditionInput]
  not: ModelPatientConditionInput
}

type Subscription {
  onCreatePatient(owner: String): Patient @aws_subscribe(mutations: ["createPatient"])
  onUpdatePatient: Patient @aws_subscribe(mutations: ["updatePatient"])
  onDeletePatient: Patient @aws_subscribe(mutations: ["deletePatient"])
  onCreateSymptom(owner: String): Symptom @aws_subscribe(mutations: ["createSymptom"])
  onUpdateSymptom: Symptom @aws_subscribe(mutations: ["updateSymptom"])
  onDeleteSymptom: Symptom @aws_subscribe(mutations: ["deleteSymptom"])
}

input LocationInput {
  longitude: Float!
  latitude: Float!
}

type ModelSymptomConnection {
  items: [Symptom]
  nextToken: String
}

input ModelSymptomFilterInput {
  id: ModelIDInput
  patientID: ModelIDInput
  fever: ModelIntInput
  coughing: ModelIntInput
  breathing: ModelIntInput
  soreThroat: ModelIntInput
  allergies: ModelIntInput
  bodyAches: ModelIntInput
  temperature: ModelFloatInput
  note: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelSymptomFilterInput]
  or: [ModelSymptomFilterInput]
  not: ModelSymptomFilterInput
}

input CreateSymptomInput {
  id: ID
  patientID: ID!
  fever: Int!
  coughing: Int!
  breathing: Int!
  soreThroat: Int!
  allergies: Int!
  bodyAches: Int!
  temperature: Float!
  location: LocationInput
  note: String
  createdAt: AWSDateTime
}

input UpdateSymptomInput {
  id: ID!
  patientID: ID
  fever: Int
  coughing: Int
  breathing: Int
  soreThroat: Int
  allergies: Int
  bodyAches: Int
  temperature: Float
  location: LocationInput
  note: String
  createdAt: AWSDateTime
}

input DeleteSymptomInput {
  id: ID
}

input ModelSymptomConditionInput {
  patientID: ModelIDInput
  fever: ModelIntInput
  coughing: ModelIntInput
  breathing: ModelIntInput
  soreThroat: ModelIntInput
  allergies: ModelIntInput
  bodyAches: ModelIntInput
  temperature: ModelFloatInput
  note: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelSymptomConditionInput]
  or: [ModelSymptomConditionInput]
  not: ModelSymptomConditionInput
}
